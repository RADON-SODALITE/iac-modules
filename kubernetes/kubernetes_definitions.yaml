tosca_definitions_version: tosca_simple_yaml_1_3
data_types:
  sodalite.datatypes.Kubernetes.Kind.AWSElasticBlockStoreVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        type: string
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        required: false
      partition:
        type: integer
        description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).'
        required: false
      readOnly:
        type: boolean
        description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        required: false
      volumeID:
        type: string
        description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        required: true
  sodalite.datatypes.Kubernetes.Kind.Affinity:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Affinity is a group of affinity scheduling rules.
    properties:
      nodeAffinity:
        type: map
        description: Describes node affinity scheduling rules for the pod.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeAffinity
      podAffinity:
        type: map
        description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodAffinity
      podAntiAffinity:
        type: map
        description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodAntiAffinity
  sodalite.datatypes.Kubernetes.Kind.AggregationRule:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
    properties:
      clusterRoleSelectors:
        type: list
        description: ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelector
  sodalite.datatypes.Kubernetes.Kind.AzureDiskVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    properties:
      cachingMode:
        type: string
        description: 'Host Caching mode: None, Read Only, Read Write.'
        required: false
      diskName:
        type: string
        description: The Name of the data disk in the blob storage
        required: true
      diskURI:
        type: string
        description: The URI the data disk in the blob storage
        required: true
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      kind:
        type: string
        description: 'Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared'
        required: true
      readOnly:
        type: boolean
        description: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        required: false
  sodalite.datatypes.Kubernetes.Kind.AzureFileVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    properties:
      readOnly:
        type: boolean
        description: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        required: false
      secretName:
        type: string
        description: the name of secret that contains Azure Storage Account Name and Key
        required: true
      shareName:
        type: string
        description: Share Name
        required: true
  sodalite.datatypes.Kubernetes.Kind.CSIVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a source location of a volume to mount, managed by an external CSI driver
    properties:
      driver:
        type: string
        description: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        required: true
      fsType:
        type: string
        description: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        required: false
      nodePublishSecretRef:
        type: map
        description: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      readOnly:
        type: boolean
        description: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        required: false
      volumeAttributes:
        type: map
        description: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        required: false
  sodalite.datatypes.Kubernetes.Kind.Capabilities:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        type: list
        description: Added capabilities
        required: false
        entry_schema:
          type: string
      drop:
        type: list
        description: Removed capabilities
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.CephFSVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        type: list
        description: 'Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        required: true
        entry_schema:
          type: string
      path:
        type: string
        description: 'Optional: Used as the mounted root, rather than the full Ceph tree, default is /'
        required: false
      readOnly:
        type: boolean
        description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        required: false
      secretFile:
        type: string
        description: 'Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        required: false
      secretRef:
        type: map
        description: 'Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      user:
        type: string
        description: 'Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        required: false
  sodalite.datatypes.Kubernetes.Kind.CinderVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        type: string
        description: 'Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        required: false
      readOnly:
        type: boolean
        description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        required: false
      secretRef:
        type: map
        description: 'Optional: points to a secret object containing parameters used to connect to OpenStack.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      volumeID:
        type: string
        description: 'volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        required: true
  sodalite.datatypes.Kubernetes.Kind.ClusterRole:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
    properties:
      aggregationRule:
        type: map
        description: AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.AggregationRule
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: Standard object's metadata.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      rules:
        type: list
        description: Rules holds all the PolicyRules for this ClusterRole
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PolicyRule
  sodalite.datatypes.Kubernetes.Kind.ClusterRoleBinding:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
    properties:
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: Standard object's metadata.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      roleRef:
        type: map
        description: RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.RoleRef
      subjects:
        type: list
        description: Subjects holds references to the objects the role applies to.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Subject
  sodalite.datatypes.Kubernetes.Kind.ConfigMapEnvSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

      The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the ConfigMap must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.ConfigMapKeySelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Selects a key from a ConfigMap.
    properties:
      key:
        type: string
        description: The key to select.
        required: true
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the ConfigMap or its key must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.ConfigMapProjection:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Adapts a ConfigMap into a projected volume.

      The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
    properties:
      items:
        type: list
        description: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.KeyToPath
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the ConfigMap or its keys must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.ConfigMapVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Adapts a ConfigMap into a volume.

      The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        type: integer
        description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
        required: false
      items:
        type: list
        description: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.KeyToPath
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the ConfigMap or its keys must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.Container:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A single application container that you want to run within a pod.
    properties:
      args:
        type: list
        description: 'Arguments to the entrypoint. The docker image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        required: false
        entry_schema:
          type: string
      command:
        type: list
        description: 'Entrypoint array. Not executed within a shell. The docker image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        required: false
        entry_schema:
          type: string
      env:
        type: list
        description: List of environment variables to set in the container. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EnvVar
      envFrom:
        type: list
        description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EnvFromSource
      image:
        type: string
        description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
        required: false
      imagePullPolicy:
        type: string
        description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        required: false
      lifecycle:
        type: map
        description: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Lifecycle
      livenessProbe:
        type: map
        description: 'Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      name:
        type: string
        description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        required: true
      ports:
        type: list
        description: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ContainerPort
      readinessProbe:
        type: map
        description: 'Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      resources:
        type: map
        description: 'Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ResourceRequirements
      securityContext:
        type: map
        description: 'Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecurityContext
      startupProbe:
        type: map
        description: 'StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod''s lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      stdin:
        type: boolean
        description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        required: false
      stdinOnce:
        type: boolean
        description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        required: false
      terminationMessagePath:
        type: string
        description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
        required: false
      terminationMessagePolicy:
        type: string
        description: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        required: false
      tty:
        type: boolean
        description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        required: false
      volumeDevices:
        type: list
        description: volumeDevices is the list of block devices to be used by the container.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VolumeDevice
      volumeMounts:
        type: list
        description: Pod volumes to mount into the container's filesystem. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VolumeMount
      workingDir:
        type: string
        description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        required: false
  sodalite.datatypes.Kubernetes.Kind.ContainerPort:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ContainerPort represents a network port in a single container.
    properties:
      containerPort:
        type: integer
        description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        required: true
      hostIP:
        type: string
        description: What host IP to bind the external port to.
        required: false
      hostPort:
        type: integer
        description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        required: false
      name:
        type: string
        description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        required: false
      protocol:
        type: string
        description: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        required: false
  sodalite.datatypes.Kubernetes.Kind.DaemonSet:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DaemonSet represents the configuration of a daemon set.
    properties:
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      spec:
        type: map
        description: 'The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DaemonSetSpec
      status:
        type: map
        description: 'The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DaemonSetStatus
  sodalite.datatypes.Kubernetes.Kind.DaemonSetCondition:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DaemonSetCondition describes the state of a DaemonSet at a certain point.
    properties:
      lastTransitionTime:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: Last time the condition transitioned from one status to another.
        required: false
      message:
        type: string
        description: A human readable message indicating details about the transition.
        required: false
      reason:
        type: string
        description: The reason for the condition's last transition.
        required: false
      status:
        type: string
        description: Status of the condition, one of True, False, Unknown.
        required: true
      type:
        type: string
        description: Type of DaemonSet condition.
        required: true
  sodalite.datatypes.Kubernetes.Kind.DaemonSetSpec:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DaemonSetSpec is the specification of a daemon set.
    properties:
      minReadySeconds:
        type: integer
        description: The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
        required: false
      revisionHistoryLimit:
        type: integer
        description: The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
        required: false
      selector:
        type: map
        description: 'A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelector
      template:
        type: map
        description: 'An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template''s node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodTemplateSpec
      updateStrategy:
        type: map
        description: An update strategy to replace existing DaemonSet pods with new pods.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DaemonSetUpdateStrategy
  sodalite.datatypes.Kubernetes.Kind.DaemonSetStatus:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DaemonSetStatus represents the current status of a daemon set.
    properties:
      collisionCount:
        type: integer
        description: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        required: false
      conditions:
        type: list
        description: Represents the latest available observations of a DaemonSet's current state.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DaemonSetCondition
      currentNumberScheduled:
        type: integer
        description: 'The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
        required: true
      desiredNumberScheduled:
        type: integer
        description: 'The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
        required: true
      numberAvailable:
        type: integer
        description: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        required: false
      numberMisscheduled:
        type: integer
        description: 'The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
        required: true
      numberReady:
        type: integer
        description: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        required: true
      numberUnavailable:
        type: integer
        description: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        required: false
      observedGeneration:
        type: integer
        description: The most recent generation observed by the daemon set controller.
        required: false
      updatedNumberScheduled:
        type: integer
        description: The total number of nodes that are running updated daemon pod
        required: false
  sodalite.datatypes.Kubernetes.Kind.DaemonSetUpdateStrategy:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
    properties:
      rollingUpdate:
        type: map
        description: Rolling update config params. Present only if type = "RollingUpdate".
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.RollingUpdateDaemonSet
      type:
        type: string
        description: Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
        required: false
  sodalite.datatypes.Kubernetes.Kind.Deployment:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: Standard object metadata.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      spec:
        type: map
        description: Specification of the desired behavior of the Deployment.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DeploymentSpec
      status:
        type: map
        description: Most recently observed status of the Deployment.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DeploymentStatus
  sodalite.datatypes.Kubernetes.Kind.DeploymentCondition:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DeploymentCondition describes the state of a deployment at a certain point.
    properties:
      lastTransitionTime:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: Last time the condition transitioned from one status to another.
        required: false
      lastUpdateTime:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: The last time this condition was updated.
        required: false
      message:
        type: string
        description: A human readable message indicating details about the transition.
        required: false
      reason:
        type: string
        description: The reason for the condition's last transition.
        required: false
      status:
        type: string
        description: Status of the condition, one of True, False, Unknown.
        required: true
      type:
        type: string
        description: Type of deployment condition.
        required: true
  sodalite.datatypes.Kubernetes.Kind.DeploymentSpec:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DeploymentSpec is the specification of the desired behavior of the Deployment.
    properties:
      minReadySeconds:
        type: integer
        description: Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
        required: false
      paused:
        type: boolean
        description: Indicates that the deployment is paused.
        required: false
      progressDeadlineSeconds:
        type: integer
        description: The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
        required: false
      replicas:
        type: integer
        description: Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
        required: false
      revisionHistoryLimit:
        type: integer
        description: The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
        required: false
      selector:
        type: map
        description: Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelector
      strategy:
        type: map
        description: The deployment strategy to use to replace existing pods with new ones.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DeploymentStrategy
      template:
        type: map
        description: Template describes the pods that will be created.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodTemplateSpec
  sodalite.datatypes.Kubernetes.Kind.DeploymentStatus:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DeploymentStatus is the most recently observed status of the Deployment.
    properties:
      availableReplicas:
        type: integer
        description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        required: false
      collisionCount:
        type: integer
        description: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
        required: false
      conditions:
        type: list
        description: Represents the latest available observations of a deployment's current state.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DeploymentCondition
      observedGeneration:
        type: integer
        description: The generation observed by the deployment controller.
        required: false
      readyReplicas:
        type: integer
        description: Total number of ready pods targeted by this deployment.
        required: false
      replicas:
        type: integer
        description: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        required: false
      unavailableReplicas:
        type: integer
        description: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        required: false
      updatedReplicas:
        type: integer
        description: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        required: false
  sodalite.datatypes.Kubernetes.Kind.DeploymentStrategy:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DeploymentStrategy describes how to replace existing pods with new ones.
    properties:
      rollingUpdate:
        type: map
        description: Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.RollingUpdateDeployment
      type:
        type: string
        description: Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
        required: false
  sodalite.datatypes.Kubernetes.Kind.DownwardAPIProjection:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
    properties:
      items:
        type: list
        description: Items is a list of DownwardAPIVolume file
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DownwardAPIVolumeFile
  sodalite.datatypes.Kubernetes.Kind.DownwardAPIVolumeFile:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DownwardAPIVolumeFile represents information to create the file containing the pod field
    properties:
      fieldRef:
        type: map
        description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectFieldSelector
      mode:
        type: integer
        description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
        required: false
      path:
        type: string
        description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
        required: true
      resourceFieldRef:
        type: map
        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ResourceFieldSelector
  sodalite.datatypes.Kubernetes.Kind.DownwardAPIVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        type: integer
        description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
        required: false
      items:
        type: list
        description: Items is a list of downward API volume file
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DownwardAPIVolumeFile
  sodalite.datatypes.Kubernetes.Kind.EmptyDirVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
    properties:
      medium:
        type: string
        description: 'What type of storage medium should back this directory. The default is "" which means to use the node''s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
        required: false
      sizeLimit:
        type: sodalite.datatypes.Kubernetes.Kind.Quantity
        description: 'Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
        required: false
  sodalite.datatypes.Kubernetes.Kind.EnvFromSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        type: map
        description: The ConfigMap to select from
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ConfigMapEnvSource
      prefix:
        type: string
        description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        required: false
      secretRef:
        type: map
        description: The Secret to select from
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecretEnvSource
  sodalite.datatypes.Kubernetes.Kind.EnvVar:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: EnvVar represents an environment variable present in a Container.
    properties:
      name:
        type: string
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        required: true
      value:
        type: string
        description: 'Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
        required: false
      valueFrom:
        type: map
        description: Source for the environment variable's value. Cannot be used if value is not empty.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EnvVarSource
  sodalite.datatypes.Kubernetes.Kind.EnvVarSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        type: map
        description: Selects a key of a ConfigMap.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ConfigMapKeySelector
      fieldRef:
        type: map
        description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectFieldSelector
      resourceFieldRef:
        type: map
        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ResourceFieldSelector
      secretKeyRef:
        type: map
        description: Selects a key of a secret in the pod's namespace
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecretKeySelector
  sodalite.datatypes.Kubernetes.Kind.EphemeralContainer:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
    properties:
      args:
        type: list
        description: 'Arguments to the entrypoint. The docker image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        required: false
        entry_schema:
          type: string
      command:
        type: list
        description: 'Entrypoint array. Not executed within a shell. The docker image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        required: false
        entry_schema:
          type: string
      env:
        type: list
        description: List of environment variables to set in the container. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EnvVar
      envFrom:
        type: list
        description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EnvFromSource
      image:
        type: string
        description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
        required: false
      imagePullPolicy:
        type: string
        description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        required: false
      lifecycle:
        type: map
        description: Lifecycle is not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Lifecycle
      livenessProbe:
        type: map
        description: Probes are not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      name:
        type: string
        description: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        required: true
      ports:
        type: list
        description: Ports are not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ContainerPort
      readinessProbe:
        type: map
        description: Probes are not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      resources:
        type: map
        description: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ResourceRequirements
      securityContext:
        type: map
        description: SecurityContext is not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecurityContext
      startupProbe:
        type: map
        description: Probes are not allowed for ephemeral containers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Probe
      stdin:
        type: boolean
        description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        required: false
      stdinOnce:
        type: boolean
        description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        required: false
      targetContainerName:
        type: string
        description: If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        required: false
      terminationMessagePath:
        type: string
        description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
        required: false
      terminationMessagePolicy:
        type: string
        description: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        required: false
      tty:
        type: boolean
        description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        required: false
      volumeDevices:
        type: list
        description: volumeDevices is the list of block devices to be used by the container.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VolumeDevice
      volumeMounts:
        type: list
        description: Pod volumes to mount into the container's filesystem. Cannot be updated.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VolumeMount
      workingDir:
        type: string
        description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        required: false
  sodalite.datatypes.Kubernetes.Kind.ExecAction:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ExecAction describes a "run in container" action.
    properties:
      command:
        type: list
        description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.FCVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      lun:
        type: integer
        description: 'Optional: FC target lun number'
        required: false
      readOnly:
        type: boolean
        description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
        required: false
      targetWWNs:
        type: list
        description: 'Optional: FC target worldwide names (WWNs)'
        required: false
        entry_schema:
          type: string
      wwids:
        type: list
        description: 'Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.'
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.FieldsV1:
    derived_from: map
    description: |-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

      Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff
  sodalite.datatypes.Kubernetes.Kind.FlexVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    properties:
      driver:
        type: string
        description: Driver is the name of the driver to use for this volume.
        required: true
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        required: false
      options:
        type: map
        description: 'Optional: Extra command options if any.'
        required: false
      readOnly:
        type: boolean
        description: 'Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
        required: false
      secretRef:
        type: map
        description: 'Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
  sodalite.datatypes.Kubernetes.Kind.FlockerVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        type: string
        description: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        required: false
      datasetUUID:
        type: string
        description: UUID of the dataset. This is unique identifier of a Flocker dataset
        required: false
  sodalite.datatypes.Kubernetes.Kind.GCEPersistentDiskVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        type: string
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        required: false
      partition:
        type: integer
        description: 'The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        required: false
      pdName:
        type: string
        description: 'Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        required: true
      readOnly:
        type: boolean
        description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        required: false
  sodalite.datatypes.Kubernetes.Kind.GitRepoVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    properties:
      directory:
        type: string
        description: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        required: false
      repository:
        type: string
        description: Repository URL
        required: true
      revision:
        type: string
        description: Commit hash for the specified revision.
        required: false
  sodalite.datatypes.Kubernetes.Kind.GlusterfsVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        type: string
        description: 'EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        required: true
      path:
        type: string
        description: 'Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        required: true
      readOnly:
        type: boolean
        description: 'ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        required: false
  sodalite.datatypes.Kubernetes.Kind.HTTPGetAction:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: HTTPGetAction describes an action based on HTTP Get requests.
    properties:
      host:
        type: string
        description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        required: false
      httpHeaders:
        type: list
        description: Custom headers to set in the request. HTTP allows repeated headers.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.HTTPHeader
      path:
        type: string
        description: Path to access on the HTTP server.
        required: false
      port:
        type: string
        description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        required: true
      scheme:
        type: string
        description: Scheme to use for connecting to the host. Defaults to HTTP.
        required: false
  sodalite.datatypes.Kubernetes.Kind.HTTPHeader:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        type: string
        description: The header field name
        required: true
      value:
        type: string
        description: The header field value
        required: true
  sodalite.datatypes.Kubernetes.Kind.Handler:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Handler defines a specific action that should be taken
    properties:
      exec:
        type: map
        description: One and only one of the following should be specified. Exec specifies the action to take.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ExecAction
      httpGet:
        type: map
        description: HTTPGet specifies the http request to perform.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.HTTPGetAction
      tcpSocket:
        type: map
        description: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.TCPSocketAction
  sodalite.datatypes.Kubernetes.Kind.HostAlias:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
    properties:
      hostnames:
        type: list
        description: Hostnames for the above IP address.
        required: false
        entry_schema:
          type: string
      ip:
        type: string
        description: IP address of the host file entry.
        required: false
  sodalite.datatypes.Kubernetes.Kind.HostPathVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        type: string
        description: 'Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        required: true
      type:
        type: string
        description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        required: false
  sodalite.datatypes.Kubernetes.Kind.ISCSIVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        type: boolean
        description: whether support iSCSI Discovery CHAP authentication
        required: false
      chapAuthSession:
        type: boolean
        description: whether support iSCSI Session CHAP authentication
        required: false
      fsType:
        type: string
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi'
        required: false
      initiatorName:
        type: string
        description: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        required: false
      iqn:
        type: string
        description: Target iSCSI Qualified Name.
        required: true
      iscsiInterface:
        type: string
        description: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        required: false
      lun:
        type: integer
        description: iSCSI Target Lun number.
        required: true
      portals:
        type: list
        description: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        required: false
        entry_schema:
          type: string
      readOnly:
        type: boolean
        description: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        required: false
      secretRef:
        type: map
        description: CHAP Secret for iSCSI target and initiator authentication
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      targetPortal:
        type: string
        description: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        required: true
  sodalite.datatypes.Kubernetes.Kind.KeyToPath:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Maps a string key to a path within a volume.
    properties:
      key:
        type: string
        description: The key to project.
        required: true
      mode:
        type: integer
        description: 'Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
        required: false
      path:
        type: string
        description: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        required: true
  sodalite.datatypes.Kubernetes.Kind.LabelSelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        type: list
        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelectorRequirement
      matchLabels:
        type: map
        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        required: false
  sodalite.datatypes.Kubernetes.Kind.LabelSelectorRequirement:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    properties:
      key:
        type: string
        description: key is the label key that the selector applies to.
        required: true
      operator:
        type: string
        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        required: true
      values:
        type: list
        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.Lifecycle:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        type: map
        description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Handler
      preStop:
        type: map
        description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod''s termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Handler
  sodalite.datatypes.Kubernetes.Kind.LocalObjectReference:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    properties:
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
  sodalite.datatypes.Kubernetes.Kind.ManagedFieldsEntry:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
    properties:
      apiVersion:
        type: string
        description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
        required: true
      fieldsType:
        type: string
        description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
        required: false
      fieldsV1:
        type: sodalite.datatypes.Kubernetes.Kind.FieldsV1
        description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
        required: false
      manager:
        type: string
        description: Manager is an identifier of the workflow managing these fields.
        required: false
      operation:
        type: string
        description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
        required: false
      time:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
        required: false
  sodalite.datatypes.Kubernetes.Kind.NFSVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        type: string
        description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        required: true
      readOnly:
        type: boolean
        description: 'ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        required: false
      server:
        type: string
        description: 'Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        required: true
  sodalite.datatypes.Kubernetes.Kind.Namespace:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Namespace provides a scope for Names. Use of multiple namespaces is optional.
    properties:
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      spec:
        type: map
        description: 'Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NamespaceSpec
      status:
        type: map
        description: 'Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NamespaceStatus
  sodalite.datatypes.Kubernetes.Kind.NamespaceCondition:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: NamespaceCondition contains details about state of namespace.
    properties:
      lastTransitionTime:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
        description: Status of the condition, one of True, False, Unknown.
        required: true
      type:
        type: string
        description: Type of namespace controller condition.
        required: true
  sodalite.datatypes.Kubernetes.Kind.NamespaceSpec:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: NamespaceSpec describes the attributes on a Namespace.
    properties:
      finalizers:
        type: list
        description: 'Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.NamespaceStatus:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: NamespaceStatus is information about the current status of a Namespace.
    properties:
      conditions:
        type: list
        description: Represents the latest available observations of a namespace's current state.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NamespaceCondition
      phase:
        type: string
        description: 'Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
        required: false
  sodalite.datatypes.Kubernetes.Kind.NodeAffinity:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Node affinity is a group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: list
        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PreferredSchedulingTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        type: map
        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeSelector
  sodalite.datatypes.Kubernetes.Kind.NodeSelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
    properties:
      nodeSelectorTerms:
        type: list
        description: Required. A list of node selector terms. The terms are ORed.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeSelectorTerm
  sodalite.datatypes.Kubernetes.Kind.NodeSelectorRequirement:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    properties:
      key:
        type: string
        description: The label key that the selector applies to.
        required: true
      operator:
        type: string
        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        required: true
      values:
        type: list
        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.NodeSelectorTerm:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    properties:
      matchExpressions:
        type: list
        description: A list of node selector requirements by node's labels.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeSelectorRequirement
      matchFields:
        type: list
        description: A list of node selector requirements by node's fields.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeSelectorRequirement
  sodalite.datatypes.Kubernetes.Kind.ObjectFieldSelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ObjectFieldSelector selects an APIVersioned field of an object.
    properties:
      apiVersion:
        type: string
        description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        required: true
      fieldPath:
        type: string
        description: Path of the field to select in the specified API version.
        required: true
  sodalite.datatypes.Kubernetes.Kind.ObjectMeta:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    properties:
      annotations:
        type: map
        description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
        required: false
      clusterName:
        type: string
        description: The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
        required: false
      creationTimestamp:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: 'CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: false
      deletionGracePeriodSeconds:
        type: integer
        description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        required: false
      deletionTimestamp:
        type: sodalite.datatypes.Kubernetes.Kind.Time
        description: 'DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: false
      finalizers:
        type: list
        description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        required: false
        entry_schema:
          type: string
      generateName:
        type: string
        description: 'GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency'
        required: false
      generation:
        type: integer
        description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        required: false
      labels:
        type: map
        description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
        required: false
      managedFields:
        type: list
        description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ManagedFieldsEntry
      name:
        type: string
        description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        required: false
      namespace:
        type: string
        description: 'Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces'
        required: false
      ownerReferences:
        type: list
        description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.OwnerReference
      resourceVersion:
        type: string
        description: 'An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
        required: false
      selfLink:
        type: string
        description: SelfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        required: false
      uid:
        type: string
        description: 'UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
        required: false
  sodalite.datatypes.Kubernetes.Kind.ObjectReference:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ObjectReference contains enough information to let you inspect or modify the referred object.
    properties:
      apiVersion:
        type: string
        description: API version of the referent.
        required: true
      fieldPath:
        type: string
        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.'
        required: false
      kind:
        type: string
        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      namespace:
        type: string
        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
        required: false
      resourceVersion:
        type: string
        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
        required: false
      uid:
        type: string
        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
        required: false
  sodalite.datatypes.Kubernetes.Kind.OwnerReference:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        type: string
        description: API version of the referent.
        required: true
      blockOwnerDeletion:
        type: boolean
        description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        required: false
      controller:
        type: boolean
        description: If true, this reference points to the managing controller.
        required: false
      kind:
        type: string
        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      name:
        type: string
        description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        required: true
      uid:
        type: string
        description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
        required: true
  sodalite.datatypes.Kubernetes.Kind.PersistentVolumeClaimVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
    properties:
      claimName:
        type: string
        description: 'ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
        required: true
      readOnly:
        type: boolean
        description: Will force the ReadOnly setting in VolumeMounts. Default false.
        required: false
  sodalite.datatypes.Kubernetes.Kind.PhotonPersistentDiskVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Photon Controller persistent disk resource.
    properties:
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      pdID:
        type: string
        description: ID that identifies Photon Controller persistent disk
        required: true
  sodalite.datatypes.Kubernetes.Kind.PodAffinity:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Pod affinity is a group of inter pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: list
        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.WeightedPodAffinityTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        type: list
        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodAffinityTerm
  sodalite.datatypes.Kubernetes.Kind.PodAffinityTerm:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    properties:
      labelSelector:
        type: map
        description: A label query over a set of resources, in this case pods.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelector
      namespaces:
        type: list
        description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        required: false
        entry_schema:
          type: string
      topologyKey:
        type: string
        description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        required: true
  sodalite.datatypes.Kubernetes.Kind.PodAntiAffinity:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: list
        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.WeightedPodAffinityTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        type: list
        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodAffinityTerm
  sodalite.datatypes.Kubernetes.Kind.PodDNSConfig:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
    properties:
      nameservers:
        type: list
        description: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        required: false
        entry_schema:
          type: string
      options:
        type: list
        description: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodDNSConfigOption
      searches:
        type: list
        description: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        required: false
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.PodDNSConfigOption:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodDNSConfigOption defines DNS resolver options of a pod.
    properties:
      name:
        type: string
        description: Required.
        required: false
      value:
        type: string
        required: false
  sodalite.datatypes.Kubernetes.Kind.PodReadinessGate:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        type: string
        description: ConditionType refers to a condition in the pod's condition list with matching type.
        required: true
  sodalite.datatypes.Kubernetes.Kind.PodSecurityContext:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        type: integer
        description: 'A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR''d with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.'
        required: false
      fsGroupChangePolicy:
        type: string
        description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".'
        required: false
      runAsGroup:
        type: integer
        description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        required: false
      runAsNonRoot:
        type: boolean
        description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
      runAsUser:
        type: integer
        description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        required: false
      seLinuxOptions:
        type: map
        description: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SELinuxOptions
      supplementalGroups:
        type: list
        description: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        required: false
        entry_schema:
          type: integer
      sysctls:
        type: list
        description: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Sysctl
      windowsOptions:
        type: map
        description: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.WindowsSecurityContextOptions
  sodalite.datatypes.Kubernetes.Kind.PodSpec:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodSpec is a description of a pod.
    properties:
      activeDeadlineSeconds:
        type: integer
        description: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        required: false
      affinity:
        type: map
        description: If specified, the pod's scheduling constraints
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Affinity
      automountServiceAccountToken:
        type: boolean
        description: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        required: false
      containers:
        type: list
        description: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Container
      dnsConfig:
        type: map
        description: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodDNSConfig
      dnsPolicy:
        type: string
        description: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        required: false
      enableServiceLinks:
        type: boolean
        description: 'EnableServiceLinks indicates whether information about services should be injected into pod''s environment variables, matching the syntax of Docker links. Optional: Defaults to true.'
        required: false
      ephemeralContainers:
        type: list
        description: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EphemeralContainer
      hostAliases:
        type: list
        description: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.HostAlias
      hostIPC:
        type: boolean
        description: 'Use the host''s ipc namespace. Optional: Default to false.'
        required: false
      hostNetwork:
        type: boolean
        description: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        required: false
      hostPID:
        type: boolean
        description: 'Use the host''s pid namespace. Optional: Default to false.'
        required: false
      hostname:
        type: string
        description: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        required: false
      imagePullSecrets:
        type: list
        description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      initContainers:
        type: list
        description: 'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Container
      nodeName:
        type: string
        description: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        required: false
      nodeSelector:
        type: map
        description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
        required: false
      overhead:
        type: map
        description: 'Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.'
        required: false
      preemptionPolicy:
        type: string
        description: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
        required: false
      priority:
        type: integer
        description: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        required: false
      priorityClassName:
        type: string
        description: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        required: false
      readinessGates:
        type: list
        description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodReadinessGate
      restartPolicy:
        type: string
        description: 'Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy'
        required: false
      runtimeClassName:
        type: string
        description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.'
        required: false
      schedulerName:
        type: string
        description: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        required: false
      securityContext:
        type: map
        description: 'SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodSecurityContext
      serviceAccount:
        type: string
        description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.'
        required: false
      serviceAccountName:
        type: string
        description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
        required: false
      shareProcessNamespace:
        type: boolean
        description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.'
        required: false
      subdomain:
        type: string
        description: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        required: false
      terminationGracePeriodSeconds:
        type: integer
        description: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        required: false
      tolerations:
        type: list
        description: If specified, the pod's tolerations.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Toleration
      topologySpreadConstraints:
        type: list
        description: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.TopologySpreadConstraint
      volumes:
        type: list
        description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Volume
  sodalite.datatypes.Kubernetes.Kind.PodTemplateSpec:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PodTemplateSpec describes the data a pod should have when created from a template
    properties:
      metadata:
        type: map
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      spec:
        type: map
        description: 'Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodSpec
  sodalite.datatypes.Kubernetes.Kind.PolicyRule:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
    properties:
      apiGroups:
        type: list
        description: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
        required: false
        entry_schema:
          type: string
      nonResourceURLs:
        type: list
        description: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
        required: false
        entry_schema:
          type: string
      resourceNames:
        type: list
        description: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
        required: false
        entry_schema:
          type: string
      resources:
        type: list
        description: Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
        required: false
        entry_schema:
          type: string
      verbs:
        type: list
        description: Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
        required: true
        entry_schema:
          type: string
  sodalite.datatypes.Kubernetes.Kind.PortworxVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: PortworxVolumeSource represents a Portworx volume resource.
    properties:
      fsType:
        type: string
        description: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      readOnly:
        type: boolean
        description: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        required: false
      volumeID:
        type: string
        description: VolumeID uniquely identifies a Portworx volume
        required: true
  sodalite.datatypes.Kubernetes.Kind.PreferredSchedulingTerm:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    properties:
      preference:
        type: map
        description: A node selector term, associated with the corresponding weight.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NodeSelectorTerm
      weight:
        type: integer
        description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        required: true
  sodalite.datatypes.Kubernetes.Kind.Probe:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    properties:
      exec:
        type: map
        description: One and only one of the following should be specified. Exec specifies the action to take.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ExecAction
      failureThreshold:
        type: integer
        description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        required: false
      httpGet:
        type: map
        description: HTTPGet specifies the http request to perform.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.HTTPGetAction
      initialDelaySeconds:
        type: integer
        description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        required: false
      periodSeconds:
        type: integer
        description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        required: false
      successThreshold:
        type: integer
        description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        required: false
      tcpSocket:
        type: map
        description: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.TCPSocketAction
      timeoutSeconds:
        type: integer
        description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        required: false
  sodalite.datatypes.Kubernetes.Kind.ProjectedVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a projected volume source
    properties:
      defaultMode:
        type: integer
        description: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        required: false
      sources:
        type: list
        description: list of volume projections
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VolumeProjection
  sodalite.datatypes.Kubernetes.Kind.Quantity:
    derived_from: string
    description: |-
      Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

      The serialization format is:

      <quantity>        ::= <signedNumber><suffix>
        (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
        (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
        (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
        a. No precision is lost
        b. No fractional digits will be emitted
        c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
        1.5 will be serialized as "1500m"
        1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

      This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
  sodalite.datatypes.Kubernetes.Kind.QuobyteVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        type: string
        description: Group to map volume access to Default is no group
        required: false
      readOnly:
        type: boolean
        description: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        required: false
      registry:
        type: string
        description: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        required: true
      tenant:
        type: string
        description: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        required: false
      user:
        type: string
        description: User to map volume access to Defaults to serivceaccount user
        required: false
      volume:
        type: string
        description: Volume is a string that references an already created Quobyte volume by name.
        required: true
  sodalite.datatypes.Kubernetes.Kind.RBDVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        type: string
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd'
        required: false
      image:
        type: string
        description: 'The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: true
      keyring:
        type: string
        description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: false
      monitors:
        type: list
        description: 'A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: true
        entry_schema:
          type: string
      pool:
        type: string
        description: 'The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: false
      readOnly:
        type: boolean
        description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: false
      secretRef:
        type: map
        description: 'SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      user:
        type: string
        description: 'The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        required: false
  sodalite.datatypes.Kubernetes.Kind.ResourceFieldSelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ResourceFieldSelector represents container resources (cpu, memory) and their output format
    properties:
      containerName:
        type: string
        description: 'Container name: required for volumes, optional for env vars'
        required: false
      divisor:
        type: sodalite.datatypes.Kubernetes.Kind.Quantity
        description: Specifies the output format of the exposed resources, defaults to "1"
        required: false
      resource:
        type: string
        description: 'Required: resource to select'
        required: true
  sodalite.datatypes.Kubernetes.Kind.ResourceRequirements:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ResourceRequirements describes the compute resource requirements.
    properties:
      limits:
        type: map
        description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        required: false
      requests:
        type: map
        description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        required: false
  sodalite.datatypes.Kubernetes.Kind.RoleRef:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: RoleRef contains information that points to the role being used
    properties:
      apiGroup:
        type: string
        description: APIGroup is the group for the resource being referenced
        required: true
      kind:
        type: string
        description: Kind is the type of resource being referenced
        required: true
      name:
        type: string
        description: Name is the name of resource being referenced
        required: true
  sodalite.datatypes.Kubernetes.Kind.RollingUpdateDaemonSet:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Spec to control the desired behavior of daemon set rolling update.
    properties:
      maxUnavailable:
        type: string
        description: 'The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.'
        required: false
  sodalite.datatypes.Kubernetes.Kind.RollingUpdateDeployment:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Spec to control the desired behavior of rolling update.
    properties:
      maxSurge:
        type: string
        description: 'The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.'
        required: false
      maxUnavailable:
        type: string
        description: 'The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.'
        required: false
  sodalite.datatypes.Kubernetes.Kind.SELinuxOptions:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        type: string
        description: Level is SELinux level label that applies to the container.
        required: false
      role:
        type: string
        description: Role is a SELinux role label that applies to the container.
        required: false
      type:
        type: string
        description: Type is a SELinux type label that applies to the container.
        required: false
      user:
        type: string
        description: User is a SELinux user label that applies to the container.
        required: false
  sodalite.datatypes.Kubernetes.Kind.ScaleIOVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        required: false
      gateway:
        type: string
        description: The host address of the ScaleIO API Gateway.
        required: true
      protectionDomain:
        type: string
        description: The name of the ScaleIO Protection Domain for the configured storage.
        required: false
      readOnly:
        type: boolean
        description: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        required: false
      secretRef:
        type: map
        description: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      sslEnabled:
        type: boolean
        description: Flag to enable/disable SSL communication with Gateway, default false
        required: false
      storageMode:
        type: string
        description: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        required: false
      storagePool:
        type: string
        description: The ScaleIO Storage Pool associated with the protection domain.
        required: false
      system:
        type: string
        description: The name of the storage system as configured in ScaleIO.
        required: true
      volumeName:
        type: string
        description: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        required: false
  sodalite.datatypes.Kubernetes.Kind.SecretEnvSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      SecretEnvSource selects a Secret to populate the environment variables with.

      The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the Secret must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.SecretKeySelector:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: SecretKeySelector selects a key of a Secret.
    properties:
      key:
        type: string
        description: The key of the secret to select from.  Must be a valid secret key.
        required: true
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the Secret or its key must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.SecretProjection:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Adapts a secret into a projected volume.

      The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
    properties:
      items:
        type: list
        description: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.KeyToPath
      name:
        type: string
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: false
      optional:
        type: boolean
        description: Specify whether the Secret or its key must be defined
        required: false
  sodalite.datatypes.Kubernetes.Kind.SecretVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: |-
      Adapts a Secret into a volume.

      The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        type: integer
        description: 'Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
        required: false
      items:
        type: list
        description: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.KeyToPath
      optional:
        type: boolean
        description: Specify whether the Secret or its keys must be defined
        required: false
      secretName:
        type: string
        description: 'Name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
        required: false
  sodalite.datatypes.Kubernetes.Kind.SecurityContext:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    properties:
      allowPrivilegeEscalation:
        type: boolean
        description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN'
        required: false
      capabilities:
        type: map
        description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Capabilities
      privileged:
        type: boolean
        description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        required: false
      procMount:
        type: string
        description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        required: false
      readOnlyRootFilesystem:
        type: boolean
        description: Whether this container has a read-only root filesystem. Default is false.
        required: false
      runAsGroup:
        type: integer
        description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
      runAsNonRoot:
        type: boolean
        description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
      runAsUser:
        type: integer
        description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
      seLinuxOptions:
        type: map
        description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SELinuxOptions
      windowsOptions:
        type: map
        description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.WindowsSecurityContextOptions
  sodalite.datatypes.Kubernetes.Kind.ServiceAccount:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets'
    properties:
      apiVersion:
        type: string
        description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        required: true
      automountServiceAccountToken:
        type: boolean
        description: AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
        required: false
      imagePullSecrets:
        type: list
        description: 'ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      kind:
        type: string
        description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        required: true
      metadata:
        type: map
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectMeta
      secrets:
        type: list
        description: 'Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ObjectReference
  sodalite.datatypes.Kubernetes.Kind.ServiceAccountTokenProjection:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
    properties:
      audience:
        type: string
        description: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        required: false
      expirationSeconds:
        type: integer
        description: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        required: false
      path:
        type: string
        description: Path is the path relative to the mount point of the file to project the token into.
        required: true
  sodalite.datatypes.Kubernetes.Kind.StorageOSVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      readOnly:
        type: boolean
        description: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        required: false
      secretRef:
        type: map
        description: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LocalObjectReference
      volumeName:
        type: string
        description: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        required: false
      volumeNamespace:
        type: string
        description: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        required: false
  sodalite.datatypes.Kubernetes.Kind.Subject:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
    properties:
      apiGroup:
        type: string
        description: APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
        required: false
      kind:
        type: string
        description: Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        required: true
      name:
        type: string
        description: Name of the object being referenced.
        required: true
      namespace:
        type: string
        description: Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
        required: false
  sodalite.datatypes.Kubernetes.Kind.Sysctl:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        type: string
        description: Name of a property to set
        required: true
      value:
        type: string
        description: Value of a property to set
        required: true
  sodalite.datatypes.Kubernetes.Kind.TCPSocketAction:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        type: string
        description: 'Optional: Host name to connect to, defaults to the pod IP.'
        required: false
      port:
        type: string
        description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        required: true
  sodalite.datatypes.Kubernetes.Kind.Time:
    derived_from: string
    description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
  sodalite.datatypes.Kubernetes.Kind.Toleration:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        type: string
        description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        required: false
      key:
        type: string
        description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        required: false
      operator:
        type: string
        description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        required: false
      tolerationSeconds:
        type: integer
        description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        required: false
      value:
        type: string
        description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        required: false
  sodalite.datatypes.Kubernetes.Kind.TopologySpreadConstraint:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: TopologySpreadConstraint specifies how to spread matching pods among the given topology.
    properties:
      labelSelector:
        type: map
        description: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.LabelSelector
      maxSkew:
        type: integer
        description: 'MaxSkew describes the degree to which pods may be unevenly distributed. It''s the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It''s a required field. Default value is 1 and 0 is not allowed.'
        required: true
      topologyKey:
        type: string
        description: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        required: true
      whenUnsatisfiable:
        type: string
        description: 'WhenUnsatisfiable indicates how to deal with a pod if it doesn''t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It''s considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won''t make it *more* imbalanced. It''s a required field.'
        required: true
  sodalite.datatypes.Kubernetes.Kind.Volume:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Volume represents a named volume in a pod that may be accessed by any container in the pod.
    properties:
      awsElasticBlockStore:
        type: map
        description: 'AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.AWSElasticBlockStoreVolumeSource
      azureDisk:
        type: map
        description: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.AzureDiskVolumeSource
      azureFile:
        type: map
        description: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.AzureFileVolumeSource
      cephfs:
        type: map
        description: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.CephFSVolumeSource
      cinder:
        type: map
        description: 'Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.CinderVolumeSource
      configMap:
        type: map
        description: ConfigMap represents a configMap that should populate this volume
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ConfigMapVolumeSource
      csi:
        type: map
        description: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.CSIVolumeSource
      downwardAPI:
        type: map
        description: DownwardAPI represents downward API about the pod that should populate this volume
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DownwardAPIVolumeSource
      emptyDir:
        type: map
        description: 'EmptyDir represents a temporary directory that shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.EmptyDirVolumeSource
      fc:
        type: map
        description: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.FCVolumeSource
      flexVolume:
        type: map
        description: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.FlexVolumeSource
      flocker:
        type: map
        description: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.FlockerVolumeSource
      gcePersistentDisk:
        type: map
        description: 'GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.GCEPersistentDiskVolumeSource
      gitRepo:
        type: map
        description: 'GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod''s container.'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.GitRepoVolumeSource
      glusterfs:
        type: map
        description: 'Glusterfs represents a Glusterfs mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.GlusterfsVolumeSource
      hostPath:
        type: map
        description: 'HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.HostPathVolumeSource
      iscsi:
        type: map
        description: 'ISCSI represents an ISCSI Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ISCSIVolumeSource
      name:
        type: string
        description: 'Volume''s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        required: true
      nfs:
        type: map
        description: 'NFS represents an NFS mount on the host that shares a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.NFSVolumeSource
      persistentVolumeClaim:
        type: map
        description: 'PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PersistentVolumeClaimVolumeSource
      photonPersistentDisk:
        type: map
        description: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PhotonPersistentDiskVolumeSource
      portworxVolume:
        type: map
        description: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PortworxVolumeSource
      projected:
        type: map
        description: Items for all in one resources secrets, configmaps, and downward API
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ProjectedVolumeSource
      quobyte:
        type: map
        description: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.QuobyteVolumeSource
      rbd:
        type: map
        description: 'RBD represents a Rados Block Device mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.RBDVolumeSource
      scaleIO:
        type: map
        description: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ScaleIOVolumeSource
      secret:
        type: map
        description: 'Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecretVolumeSource
      storageos:
        type: map
        description: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.StorageOSVolumeSource
      vsphereVolume:
        type: map
        description: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.VsphereVirtualDiskVolumeSource
  sodalite.datatypes.Kubernetes.Kind.VolumeDevice:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: volumeDevice describes a mapping of a raw block device within a container.
    properties:
      devicePath:
        type: string
        description: devicePath is the path inside of the container that the device will be mapped to.
        required: true
      name:
        type: string
        description: name must match the name of a persistentVolumeClaim in the pod
        required: true
  sodalite.datatypes.Kubernetes.Kind.VolumeMount:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: VolumeMount describes a mounting of a Volume within a container.
    properties:
      mountPath:
        type: string
        description: Path within the container at which the volume should be mounted.  Must not contain ':'.
        required: true
      mountPropagation:
        type: string
        description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        required: false
      name:
        type: string
        description: This must match the Name of a Volume.
        required: true
      readOnly:
        type: boolean
        description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        required: false
      subPath:
        type: string
        description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        required: false
      subPathExpr:
        type: string
        description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        required: false
  sodalite.datatypes.Kubernetes.Kind.VolumeProjection:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Projection that may be projected along with other supported volume types
    properties:
      configMap:
        type: map
        description: information about the configMap data to project
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ConfigMapProjection
      downwardAPI:
        type: map
        description: information about the downwardAPI data to project
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DownwardAPIProjection
      secret:
        type: map
        description: information about the secret data to project
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.SecretProjection
      serviceAccountToken:
        type: map
        description: information about the serviceAccountToken data to project
        required: false
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ServiceAccountTokenProjection
  sodalite.datatypes.Kubernetes.Kind.VsphereVirtualDiskVolumeSource:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: Represents a vSphere volume resource.
    properties:
      fsType:
        type: string
        description: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        required: false
      storagePolicyID:
        type: string
        description: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        required: false
      storagePolicyName:
        type: string
        description: Storage Policy Based Management (SPBM) profile name.
        required: false
      volumePath:
        type: string
        description: Path that identifies vSphere volume vmdk
        required: true
  sodalite.datatypes.Kubernetes.Kind.WeightedPodAffinityTerm:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        type: map
        description: Required. A pod affinity term, associated with the corresponding weight.
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.PodAffinityTerm
      weight:
        type: integer
        description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        required: true
  sodalite.datatypes.Kubernetes.Kind.WindowsSecurityContextOptions:
    derived_from: sodalite.datatypes.Kubernetes.Kind
    description: WindowsSecurityContextOptions contain Windows-specific options and credentials.
    properties:
      gmsaCredentialSpec:
        type: string
        description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        required: false
      gmsaCredentialSpecName:
        type: string
        description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        required: false
      runAsUserName:
        type: string
        description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        required: false
node_types:
  sodalite.nodes.Kubernetes.Kind.ClusterRole:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.ClusterRole
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ClusterRole
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
  sodalite.nodes.Kubernetes.Kind.ClusterRoleBinding:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.ClusterRoleBinding
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ClusterRoleBinding
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
  sodalite.nodes.Kubernetes.Kind.DaemonSet:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: DaemonSet represents the configuration of a daemon set.
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.DaemonSet
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.DaemonSet
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
  sodalite.nodes.Kubernetes.Kind.Deployment:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.Deployment
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Deployment
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
  sodalite.nodes.Kubernetes.Kind.Namespace:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: Namespace provides a scope for Names. Use of multiple namespaces is optional.
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.Namespace
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.Namespace
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
  sodalite.nodes.Kubernetes.Kind.ServiceAccount:
    derived_from: sodalite.nodes.Kubernetes.Kind
    description: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets'
    properties:
      definition:
        type: map
        description: Full definition can be found in sodalite.datatypes.Kubernetes.Kind.ServiceAccount
        required: true
        entry_schema:
          type: sodalite.datatypes.Kubernetes.Kind.ServiceAccount
    requirements:
    - host:
        capability: tosca.capabilities.Compute
        node: sodalite.nodes.Kubernetes.Cluster
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/create_kind_from_definition.yaml
          delete:
            inputs:
              definition:
                type: map
                default: {get_property: [SELF, definition]}
              kubeconfig:
                type: string
                default: {get_property: [SELF, host, kubeconfig]}
            implementation:
              primary: playbooks/delete_kind_from_definition.yaml
